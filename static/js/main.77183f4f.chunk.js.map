{"version":3,"sources":["services/unsplash.ts","components/SearchBar.tsx","containers/SearchPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ACCESS_KEY","String","process","unsplash","Unsplash","accessKey","Form","styled","form","Button","button","Input","input","SearchBar","props","useState","searchedPhrase","setSearchedPhrase","type","icon","faSearch","placeholder","value","onChange","e","target","faTimes","SearchPage","background","setBackground","BackgroundImage","div","A","a","useEffect","photos","getRandomPhoto","then","data","json","photo","console","log","urls","regular","className","href","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8QAEMA,EAAqBC,OAAOC,+CAE5BC,EAAW,IAAIC,IAAS,CAC1BC,UAAWL,I,4XCIf,IAAMM,EAAOC,IAAOC,KAAV,KAOJC,EAASF,IAAOG,OAAV,KAINC,EAAQJ,IAAOK,MAAV,KAwBIC,EAnB6B,SAAAC,GAAU,IAAD,EACLC,mBAAS,IADJ,mBAC1CC,EAD0C,KAC1BC,EAD0B,KAGjD,OACI,kBAACX,EAAD,KACI,kBAACG,EAAD,CAAQS,KAAM,UACV,kBAAC,IAAD,CAAiBC,KAAMC,OAE3B,kBAACT,EAAD,CAAOU,YAAa,qCACbC,MAAON,EACPO,SAAU,SAAAC,GAAC,OAAIP,EAAkBO,EAAEC,OAAOH,UAEjD,kBAACb,EAAD,CAAQS,KAAM,SACV,kBAAC,IAAD,CAAiBC,KAAMO,S,yjBC7BvC,IA+CeC,EA/C+B,SAAAb,GAAU,IAAD,EACfC,mBAAS,IADM,mBAC5Ca,EAD4C,KAChCC,EADgC,KAG7CC,EAAkBvB,IAAOwB,IAAV,IAU4DH,GAK3EI,EAAIzB,IAAO0B,EAAV,KAWP,OAPAC,qBAAU,WFtBH/B,EAASgC,OAAOC,eAAe,IACjCC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UEsBFF,MAAK,SAAAG,GAClBC,QAAQC,IAAIF,GACZX,EAAcW,EAAMG,KAAKC,cAE9B,IAGC,kBAACd,EAAD,KACI,yBAAKe,UAAW,aACZ,yBAAKA,UAAW,OACZ,4BAAQA,UAAW,SACf,yBAAKA,UAAW,MAAhB,YACA,yBAAKA,UAAW,QACZ,yBAAKA,UAAW,yBAAhB,4BAAkE,kBAACb,EAAD,CAAGc,KAAM,KAAT,yBAAlE,KACA,yBAAKD,UAAW,yBAAhB,oCAEJ,kBAAC,EAAD,W,MChCTE,MAVf,WACE,OACE,yBAAKF,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAM,IAAKC,UAAWvB,OCEvBwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAQC,SAAUzD,qBACd,kBAAC,EAAD,QAGR0D,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.77183f4f.chunk.js","sourcesContent":["import Unsplash from \"unsplash-js\";\r\n\r\nconst ACCESS_KEY: string = String(process.env.REACT_APP_API_ACCESS_KEY);\r\n\r\nconst unsplash = new Unsplash({\r\n    accessKey: ACCESS_KEY\r\n})\r\n\r\nexport const getRandomImage = () => {\r\n    return unsplash.photos.getRandomPhoto({})\r\n        .then(data => data.json());\r\n}","import React, {useState} from 'react';\r\nimport styled from \"styled-components\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faSearch, faTimes} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\ninterface SearchBarProps {\r\n\r\n}\r\n\r\nconst Form = styled.form`\r\n    display: flex;\r\n    width: 100%;\r\n    background-color: white;\r\n    border-radius: 5px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    padding: 0 15px;\r\n`;\r\n\r\nconst Input = styled.input`\r\n    flex: 1;\r\n    padding: 10px 0;\r\n`;\r\n\r\nconst SearchBar: React.FC<SearchBarProps> = props => {\r\n    const [searchedPhrase, setSearchedPhrase] = useState(\"\");\r\n\r\n    return (\r\n        <Form>\r\n            <Button type={\"submit\"}>\r\n                <FontAwesomeIcon icon={faSearch}/>\r\n            </Button>\r\n            <Input placeholder={\"Search free high-resolution photos\"}\r\n                   value={searchedPhrase}\r\n                   onChange={e => setSearchedPhrase(e.target.value)}\r\n            />\r\n            <Button type={\"reset\"}>\r\n                <FontAwesomeIcon icon={faTimes}/>\r\n            </Button>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default SearchBar;","import React, {useEffect, useState} from 'react';\r\nimport styled from \"styled-components\"\r\nimport {getRandomImage} from \"../services/unsplash\";\r\nimport SearchBar from \"../components/SearchBar\";\r\n\r\ninterface SearchPageProps {\r\n\r\n}\r\n\r\nconst SearchPage: React.FC<SearchPageProps> = props => {\r\n    const [background, setBackground] = useState(\"\");\r\n\r\n    const BackgroundImage = styled.div`\r\n        align-items: center;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        color: white;\r\n        \r\n        height: 100vh;\r\n        width: 100%;\r\n        \r\n        background: linear-gradient( rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5) ), url(${background});\r\n        background-size: cover;\r\n        background-position: center;\r\n    `;\r\n\r\n    const A = styled.a`\r\n        text-decoration: underline !important;\r\n    `\r\n\r\n    useEffect(() => {\r\n        getRandomImage().then(photo => {\r\n            console.log(photo);\r\n            setBackground(photo.urls.regular);\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <BackgroundImage>\r\n            <div className={\"container\"}>\r\n                <div className={\"row\"}>\r\n                    <header className={\"w-100\"}>\r\n                        <div className={\"h1\"}>Unsplash</div>\r\n                        <div className={\"py-3\"}>\r\n                            <div className={\"h5 font-weight-normal\"}>The Internet's source of <A href={\"/\"}>freely-usable-images.</A> </div>\r\n                            <div className={\"h5 font-weight-normal\"}>Powered by creators everywhere.</div>\r\n                        </div>\r\n                        <SearchBar/>\r\n                    </header>\r\n                </div>\r\n            </div>\r\n        </BackgroundImage>\r\n    );\r\n};\r\n\r\nexport default SearchPage;","import React from 'react';\r\nimport { Switch, Route } from \"react-router-dom\";\r\n\r\nimport SearchPage from \"./containers/SearchPage\";\r\nimport './styles/index.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Switch>\r\n        <Route exact path={\"/\"} component={SearchPage}/>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n          <App />\r\n      </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}